---
title: Deploying Cloud Foundry on AWS with BOSH AWS Bootstrap
---

<table style="width: 60%;"><tr><td>
<strong>WARNING</strong>: The command <code>bosh aws destroy</code> destroys everything in your AWS account, including all S3 buckets and all instances. Do not use this command unless you want to lose <strong>everything</strong> in your AWS account, including objects and files unrelated to your Cloud Foundry deployment.
</td></tr></table>

Cloud Foundry tools simplify the process of deploying a Cloud Foundry instance
to a variety of platforms, including Amazon Web Services (AWS).
The following document guides you through using BOSH and the [cf Command Line Interface (CLI)](../../devguide/installcf/index.html) to deploy
Cloud Foundry to Amazon Web Services.

## <a id='domain-prep'></a> Prepare a Domain ##

1. Select a DNS domain name for your Cloud Foundry instance.
For example, if you select the domain name *cloud.example.com*, Cloud Foundry deploys each of your applications as *APP-NAME.cloud.example.com*.

1. Create an AWS Route 53 Hosted Zone for your domain on the [AWS Route 53 control panel](https://console.aws.amazon.com/route53).
The control panel displays a **delegation set**, which is a list of addresses to
which you must delegate DNS authority for your domain.
For example, if you selected the domain name *cloud.example.com*, each address
in the delegation set should become an NS record in the DNS server for
*example.com*.

<%= image_tag("hostedzone.png") %>

## <a id='deployment-env-prep'></a> Prepare the Deployment Environment ##

Ruby 1.9.3 and git (1.8 or later) are prerequisites for the following
steps.

1. After you install Ruby and git, install the `bundler` RubyGem:

    <pre class="terminal">
    $ gem install bundler
    </pre>

1. Create a deployments directory with a sub-directory for your deployment.

    <pre class="terminal">
    $ mkdir deployments
    $ cd deployments
    $ mkdir cf-example
    </pre>

1. In the sub-directory, create a file named `Gemfile` with the following
contents:

    ~~~
    source 'https://rubygems.org'
    ruby "1.9.3"
    gem "bosh_cli_plugin_aws"
    ~~~

1. Run `bundle install` to install the gems you specified in the `Gemfile`.

    <pre class="terminal">
    $ bundle install
    </pre>

1. Create a file named `bosh_environment` and add the following contents,
replacing the values in each line to match your configuration:

    ~~~
    export BOSH_VPC_DOMAIN=example.com
    export BOSH_VPC_SUBDOMAIN=my-subdomain
    export BOSH_AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID
    export BOSH_AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY
    export BOSH_AWS_REGION=my-aws-region
    export BOSH_VPC_PRIMARY_AZ=us-east-1d   # see note below    
    export BOSH_VPC_SECONDARY_AZ=us-east-1a # see note below
    ~~~

    <p class="note"><strong>Note</strong>: The values you add for <code>BOSH_VPC_DOMAIN</code> and <code>BOSH_VPC_SUBDOMAIN</code> must correspond to the DNS domain name you set up when configuring Route 53.</p>

1. Run `source bosh_environment` to set the environment variables required for deploying to AWS.

    <pre class="terminal">
    $ source bosh_environment
    </pre>

    <p class="note"><strong>Note</strong>: The following steps only support deployment to the <code>us-east-1</code> region of AWS.<br><br>
To deploy MicroBOSH, review <a href="https://gist.github.com/danhigham/5804252">this guide</a>.</p>

1. Choose an availability zone that is listed as "operating normally" in the
Health Status section of the
the [AWS Console](https://console.aws.amazon.com/ec2/v2/home?region=us-east-1)
for your region.

1. Run `bosh aws create` to create a VPC Internet Gateway, VPC subnets,
three RDS databases, and a NAT VM for Cloud Foundry subnet routing.
This command generates two receipt files, `aws_rds_receipt.yml` and
`aws_vpc_receipt.yml`, that you use when deploying Cloud Foundry.

    <pre class="terminal">
    $ bosh aws create
    Executing migration CreateKeyPairs
    allocating 1 KeyPair(s)
    Executing migration CreateVpc
    . . .
    details in S3 receipt: aws_rds_receipt and file: aws_rds_receipt.yml
    Executing migration CreateS3
    creating bucket xxxx-bosh-blobstore
    creating bucket xxxx-bosh-artifacts
    </pre>

    <p class="note"><strong>Note</strong>: RDS database creation may take 20 or more minutes.</p>

## <a id='deploy-microbosh'></a> Deploy MicroBOSH ##

1. Deploy MicroBOSH from the workspace directory, using the `bosh aws bootstrap micro` command:

    <pre class="terminal">
    $ bosh aws bootstrap micro

    WARNING! Your target has been changed to `https://10.10.0.6:25555'!
    Deployment set to '/Users/pivotal/cf/deployments/micro/micro_bosh.yml'
    Deploying new micro BOSH instance `micro/micro_bosh.yml' to    `https://10.10.0.6:25555' (type 'yes' to continue): yes

    Deploy MicroBOSH
      using existing stemcell (00:00:00)
    . . .
    Deployed `micro/micro_bosh.yml' to `https://10.10.0.6:25555', took 00:04:57 to complete
    </pre>

1. The `bosh aws bootstrap` command prompts you for a user name and password.
Create a user name and password for later use accessing your MicroBOSH
installation.

1. After MicroBOSH has deployed successfully, you can check its status:

    <pre class="terminal">
    $ bosh status

    Updating director data... done
    Config
        ~/.bosh_config

    Director
      Name       micro-xxxx
      URL        https://x.x.x.x:25555
      Version    1.5.0.pre.xxx (release:xxxxx bosh:xxxxx)
      User       admin
      UUID       xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx
      CPI        aws
      dns        enabled (domain_name: microbosh)
      compiled_package_cache disabled

    Deployment
      Manifest   ~/cf/deployments/micro/micro_bosh.yml
    </pre>

## <a id='upload-stemcell'></a>Upload a Stemcell##

1. Use the `bosh public stemcells` command to view a list of available public
stemcells.

    <pre class="terminal">
    $ bosh public stemcells
    +---------------------------------------------+
    | Name                                        |
    +---------------------------------------------+
    | bosh-stemcell-1657-aws-xen-ubuntu.tgz       |
    | bosh-stemcell-1657-aws-xen-centos.tgz       |
    | light-bosh-stemcell-1657-aws-xen-ubuntu.tgz |
    | light-bosh-stemcell-1657-aws-xen-centos.tgz |
    | bosh-stemcell-1657-openstack-kvm-ubuntu.tgz |
    | bosh-stemcell-1657-vsphere-esxi-ubuntu.tgz  |
    | bosh-stemcell-1657-vsphere-esxi-centos.tgz  |
    +---------------------------------------------+
    To download use `bosh download public stemcell &lt;stemcell_name&gt;'. For full url use --full.
    </pre>

1. Use the `bosh download public stemcell` command to download the latest `ubuntu aws` stemcell.

    <pre class="terminal">
    $ bosh download public stemcell bosh-stemcell-1657-aws-xen-ubuntu.tgz
    </pre>

1. Use the `bosh upload stemcell` command to upload the stemcell to the BOSH
Director:

    <pre class="terminal">
    $ bosh upload stemcell ./bosh-stemcell-1657-aws-xen-ubuntu.tgz
    </pre>

## <a id='create-a-stub'></a>Create a Deployment Stub ##

Create a manifest stub file named `cf-stub.yml`. You will use [Spiff](https://github.com/cloudfoundry-incubator/spiff) to merge this file with
Cloud Foundry templates to generate a BOSH manifest for your Cloud Foundry
deployment.

Example stub file:

<pre class="terminal">
---
name: cf-example
director_uuid: 80be9b46-435f-41db-96a4-453f8d59f53c
releases:
  - name: cf
    version: latest

networks:
- name: cf1
  type: manual
  subnets:
  - range: 10.10.16.0/20
    name: default_unused
    reserved:
    - 10.10.16.2 - 10.10.16.9
    static:
    - 10.10.16.10 - 10.10.16.253
    gateway: 10.10.16.1
    dns:
    - 10.10.0.2
    cloud_properties:
      security_groups:
      - cf
      subnet: (( properties.template_only.aws.subnet_ids.cf1 ))

- name: cf2
  type: manual
  subnets:
  - range: 10.10.80.0/20
    name: default_unused
    reserved:
    - 10.10.80.2 - 10.10.80.9
    static:
    - 10.10.80.10 - 10.10.80.253
    gateway: 10.10.80.1
    dns:
    - 10.10.0.2
    cloud_properties:
      security_groups:
      - cf
      subnet: (( properties.template_only.aws.subnet_ids.cf2 ))

properties:
  template_only:
    aws:
      access_key_id: PLACEHOLDER-ACCESS-KEY-ID
      secret_access_key: PLACEHOLDER-SECRET-KEY
      availability_zone: us-east-1a # Change this if you'd like to
      availability_zone2: us-east-1b # Change this if you'd like to
      subnet_ids:
        cf1: PLACEHOLDER-SUBNET-FOR-AZ1
        cf2: PLACEHOLDER-SUBNET-FOR-AZ2

  domain: PLACEHOLDER-DOMAIN

  nats:
    user: PLACEHOLDER-NATS-USER
    password: PLACEHOLDER-NATS-PASSWORD

  cc:
    db_encryption_key: PLACEHOLDER-CC-DB-ENCRYPTION-KEY
    bulk_api_password: PLACEHOLDER-BULK-API-PASSWORD
    staging_upload_password: PLACEHOLDER-STAGING-UPLOAD-PASSWORD
    staging_upload_user: PLACEHOLDER-STAGING-UPLOAD-USER

  uaa:
    scim:
      users:
      - admin|the_admin_pw|scim.write,scim.read,openid,cloud_controller.admin         #change if you like
      - services|the_services_pw|scim.write,scim.read,openid,cloud_controller.admin   #change if you like
    admin:
      client_secret: PLACEHOLDER-UAA-ADMIN-CLIENT-SECRET
    jwt:
      signing_key: PLACEHOLDER-UAA-JWT-SIGNING-KEY # Use the YAML "|" character to format multiline RSA key data
      verification_key: PLACEHOLDER-UAA-JWT-VERIFICATION-KEY # Use the YAML "|" character to format multiline RSA key data
    clients:
      login:
        secret: PLACEHOLDER-UAA-CLIENTS-LOGIN-SECRET
      developer_console:
        secret: PLACEHOLDER-UAA-CLIENTS-DEVELOPER-CONSOLE-SECRET
      app-direct:
        secret: PLACEHOLDER-UAA-CLIENTS-APP-DIRECT-SECRET
      support-services:
        secret: PLACEHOLDER-UAA-CLIENTS-SUPPORT-SERVICES-SECRET
      servicesmgmt:
        secret: PLACEHOLDER-UAA-CLIENTS-SERVICESMGMT-SECRET
      space-mail:
        secret: PLACEHOLDER-UAA-CLIENTS-SPACE-MAIL-SECRET
      notifications:
        secret: PLACEHOLDER-UAA-CLIENTS-NOTIFICATION-SECRET
    batch:
      username: PLACEHOLDER-UAA-BATCH-USERNAME
      password: PLACEHOLDER-UAA-BATCH-PASSWORD
    cc:
      client_secret: PLACEHOLDER-UAA-CC-CLIENT-SECRET

  uaadb: PLACEHOLDER_UAADB_PROPERTIES
  ccdb: PLACEHOLDER_CCDB_PROPERTIES

  router:
    status:
      user: PLACEHOLDER-ROUTER-STATUS-USER
      password: PLACEHOLDER-ROUTER-STATUS-PASSWORD

  dea_next:
    disk_mb: 400001
    memory_mb: 6656

  loggregator_endpoint:
    shared_secret: PLACEHOLDER-LOGGREGATOR-SECRET

  ssl:
    skip_cert_verify: false
</pre>

Replace placeholders with the appropriate data:

- `PLACEHOLDER-DIRECTOR-UUID` - the BOSH director UUID. You can get it by running `bundle exec bosh status`.

- `PLACEHOLDER-ACCESS-KEY-ID` and `PLACEHOLDER-SECRET-KEY` - AWS access key id and secret key. You can use the same ones as you used in the `bosh_environment` file above, or generate new ones.

- `PLACEHOLDER-AWS-AVAILABILITY-ZONE` and `PLACEHOLDER-AWS-AVAILABILITY-ZONE2` - `BOSH_VPC_PRIMARY_AZ` and `BOSH_VPC_SECONDARY_AZ` from the `bosh_environment` file above.

- `PLACEHOLDER-SUBNET-FOR-AZ1` and `PLACEHOLDER-SUBNET-FOR-AZ2` - Look in `~/deployments/cf-example/aws_vpc_receipt.yml` (this file was generated when you ran `bosh aws create`).  They are under 'subnets' 'cf1' and 'cf2'.

- `PLACEHOLDER-DOMAIN` - `BOSH_VPC_SUBDOMAIN.BOSH_VPC_DOMAIN` from the `bosh_environment` file above (hosted domain created in route 53).

- `PLACEHOLDER-UAADB-PROPERTIES`, `PLACEHOLDER-CCDB-PROPERTIES` - copy these from `~/deployments/cf-example/aws_rds_receipt.yml`

Generate secure keys for the following placeholders:

- `PLACEHOLDER-NATS-USER`

- `PLACEHOLDER-NATS-PASSWORD`

- `PLACEHOLDER-CC-DB-ENCRYPTION-KEY`

- `PLACEHOLDER-BULK-API-PASSWORD`

- `PLACEHOLDER-CC-STAGING-UPLOAD-USER`

- `PLACEHOLDER-CC-STAGING-UPLOAD-PASSWORD`

- `PLACEHOLDER-UAA-ADMIN-CLIENT-SECRET`

- `PLACEHOLDER-UAA-CLIENTS-LOGIN-SECRET`

- `PLACEHOLDER-UAA-CLIENTS-DEVELOPER-CONSOLE-SECRET`

- `PLACEHOLDER-UAA-CLIENTS-APP-DIRECT-SECRET`

- `PLACEHOLDER-UAA-CLIENTS-SUPPORT-SERVICES-SECRET`

- `PLACEHOLDER-UAA-CLIENTS-SERVICESMGMT-SECRET`

- `PLACEHOLDER-UAA-CLIENTS-SPACE-MAIL-SECRET`

- `PLACEHOLDER-UAA-BATCH-USERNAME`

- `PLACEHOLDER-UAA-BATCH-PASSWORD`

- `PLACEHOLDER-UAA-CC-CLIENT-SECRET`

- `PLACEHOLDER-ROUTER-STATUS-USER`

- `PLACEHOLDER-ROUTER-STATUS-PASSWORD`

- `PLACEHOLDER-LOGGREGATOR-SECRET`


Generate RSA key pair for:

- `PLACEHOLDER-UAA-JWT-SIGNING-KEY` and `PLACEHOLDER-UAA-JWT-VERIFICATION-KEY`

You can also replace the users username/password in `uaa:scim:users` list.

If you are using Self-Signed SSL certificates:

- Change ```skip_cert_verify:``` to ```true```

## <a id='deploy-cloudfoundry'></a>Deploy Cloud Foundry##

1. Clone the `cf-release` GitHub repository.

    <pre class="terminal">
    $ git clone https://github.com/cloudfoundry/cf-release.git
    </pre>

1. Use the `update` helper script to update the `cf-release` submodules:

    <pre class="terminal">
    $ cd cf-release
    $ ./update
    </pre>

1. Install [Spiff](https://github.com/cloudfoundry-incubator/spiff).

1. Run the following Spiff command from the `cf-release` directory to create a deployment manifest named `cf-deployment.yml`:

    `./generate_deployment_manifest INFRASTRUCTURE MANIFEST-STUB > cf-deployment.yml`

    Replace INFRASTRUCTURE with `aws`, `openstack`, `vsphere`, or `warden`, and replace MANIFEST-STUB with the name and location of your `cf-stub.yml file`. For example:

    <pre class="terminal">
	$ ./generate_deployment_manifest aws cf-stub.yml > cf-deployment.yml
    </pre>

1. Use `bosh target` to target the BOSH Director:

    <pre class="terminal">
    $ bosh target
    Current target is https://x.x.x.x:25555 (micro-xxxxxx)
    </pre>

1. Set your deployment to the generated manifest:

    <pre class="terminal">
    $ bosh deployment cf-deployment.yml
    </pre>

1. Use `bosh create release` to create a Cloud Foundry release.
This command prompts you for a development release name.

    <pre class="terminal">
    $ bosh create release
    </pre>

1. Use `bosh upload release` to upload the generated release to the BOSH
Director:

    <pre class="terminal">
    $ bosh upload release
    </pre>

1. Deploy the uploaded Cloud Foundry release:

    <pre class="terminal">
    $ bosh deploy
    </pre>

    <p class="note"><strong>Note</strong>: <code>bosh deploy</code> can take 2-3 hours to complete.</p>

1. Use `curl` to test the API endpoint of your Cloud Foundry installation.

    <pre class="terminal">
    $ curl api.subdomain.domain/info
    </pre>

    If `curl` succeeds, it should return the JSON-formatted information.
	If `curl` does not succeeds, check your networking and make sure your domain
	has an NS record for your subdomain.

1. You should be able to target your Cloud Foundry installation with the [cf Command Line Interface (CLI)](/devguide/installcf/index.html) and log in as an
administrator.

    The user name, `admin` and the password, `fakepassword`, are specified in
    the deployment manifest under **uaa:scim:users.

    For more information about managing organizations, spaces, users, and
    applications, refer to the [cf](/devguide/installcf/index.html) topic.

## <a id='updates'></a>Update Cloud Foundry##

* If you make change to your manifest, run `bosh deploy` to update your Cloud
Foundry deployment with these changes.

* If you make changes to the `cf-release` directory, run `bosh create release && bosh upload release && bosh deploy` to update your Cloud Foundry deployment with
these changes.

## <a id='deploy-cloudfoundry-services'></a>Deploy Cloud Foundry Services##

If you want your Cloud Foundry to be able to provision services, you must deploy
a services release. Refer to the [services documentation](/services/).

You also might be interested in the [community-managed services release](https://github.com/cloudfoundry/cf-services-contrib-release).

## <a id='destroy-environment'></a>Destroying the AWS Environment ##

1. Use `bosh aws destroy` to destroy your AWS environment.

    <table style="width: 60%;"><tr><td>
    <strong>WARNING</strong>: The command <code>bosh aws destroy</code> destroys everything in your AWS account, including all S3 buckets and all instances. Do not use this command unless you want to lose <strong>everything</strong> in your AWS account, including objects and files unrelated to your Cloud Foundry deployment.
    </td></tr></table>

	<pre class="terminal">
	$ bosh aws destroy
	</pre>

1. Remove any YAML artifacts:

    <pre class="terminal">
    $ rm -f *.yml
    </pre>
